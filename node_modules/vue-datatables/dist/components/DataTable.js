'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    template: '\n        <div class="{{wrapperClass}}">\n            <table :class="tableClass" :class="{\'dtr-inline\': responsive}" v-el:table>\n                <thead>\n                    <tr>\n                        <template v-for="column in columns">\n                            <template v-if="column.visible">\n                                <template v-if="isSpecialColumn(column.name)">\n                                    <th id="{{column.name}}" class="{{column.titleClass || \'\'}}">\n                                        {{column.title || \'\'}}\n                                    </th>\n                                </template>\n                                <template v-else>\n                                    <th id="_{{column.name}}" class="{{column.titleClass || \'\'}}">\n                                        {{getTitle(column) | capitalize}}\n                                    </th>\n                                </template>\n                            </template>\n                        </template>\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    ',

    props: {
        wrapperClass: {
            type: String,
            default: function _default() {
                return null;
            }
        },

        tableClass: {
            type: String,
            default: function _default() {
                return 'table table-bordered table-striped table-hover';
            }
        },

        columns: {
            type: Array
            // required: true
        },

        url: {
            type: String
            // required: true
        },

        itemActions: {
            type: Array,
            default: function _default() {
                return [];
            }
        },

        serverSide: {
            type: Boolean,
            default: function _default() {
                return true;
            }
        },

        initOnStart: {
            type: Boolean,
            default: function _default() {
                return true;
            }
        },

        language: {
            type: Object,
            default: function _default() {
                return {
                    search: '_INPUT_',
                    searchPlaceholder: 'Search...',
                    lengthMenu: '_MENU_',
                    paginate: {
                        previous: '&laquo;',
                        next: '&raquo;'
                    }
                };
            }
        },

        order: {
            type: Array,
            default: function _default() {
                return [];
            }
        },

        responsive: {
            default: function _default() {
                return false;
            }
        },

        options: {
            type: Array,
            default: function _default() {
                return [];
            }
        }
    },

    data: function data() {
        return {
            table: null,
            eventPrefix: 'vue-datatables:'
        };
    },


    events: {
        'vue-datatables:init': function vueDatatablesInit() {
            this.initDataTable();
        },

        'vue-datatables:refresh': function vueDatatablesRefresh() {
            this.table.draw();
        }
    },

    ready: function ready() {
        this.normalizeColumns();

        if (this.initOnStart) {
            this.initDataTable();
        }
    },


    methods: {
        /**
         * Initialize DataTable.
         */
        initDataTable: function initDataTable() {
            var table = (0, _jquery2.default)(this.$els.table);

            var options = Object.assign({}, this.options, this.defaults());

            this.enhanceColumns(options.columns);

            this.table = table.DataTable(options);

            this.actionsEvents();

            this.$dispatch(this.eventPrefix + 'ready', table, this.table);
        },


        /**
         * Normalize the columns.
         */
        normalizeColumns: function normalizeColumns() {
            var _this = this;

            this.columns.map(function (column) {
                if (typeof column === 'string') {
                    column = { name: column };
                }

                if (column.title === undefined) {
                    column.title = _this.title(column.name);
                }

                if (column.visible === undefined) {
                    column.visible = true;
                }

                return column;
            });
        },


        /**
         * Get default options.
         *
         * @return {Object}
         */
        defaults: function defaults() {
            return {
                ajax: this.url,
                autoWidth: false,
                order: this.order,
                columns: this.columns,
                language: this.language,
                serverSide: this.serverSide,
                responsive: this.responsive
            };
        },


        /**
         * Add extra properties to the columns.
         *
         * @param {Array} columns
         */
        enhanceColumns: function enhanceColumns(columns) {
            var _this2 = this;

            columns.forEach(function (column, i) {
                if (column === '__actions') {
                    columns[i] = _this2.buildActions();
                }

                if (column.callback) {
                    column.render = function () {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        return _this2.callCallback.apply(_this2, [column].concat(args));
                    };
                }
            });
        },


        /**
         * Call column callback method on the parent component.
         *
         * @param {Object} column
         * @param {Array}  ...args
         */
        callCallback: function callCallback(column) {
            if (typeof this.$parent[column.callback] === 'function') {
                for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                }

                return this.$parent[column.callback].apply(this.$parent, args);
            }
        },


        /**
         * Attach actions events.
         */
        actionsEvents: function actionsEvents() {
            var _this3 = this;

            this.itemActions.forEach(function (action) {
                _this3.table.on('click', '[data-action="' + action.name + '"]', function (e) {
                    e.preventDefault();

                    var index = (0, _jquery2.default)(e.currentTarget).data('row');
                    var row = _this3.table.row(index).data();

                    _this3.callAction(action.name, row, index);
                });
            });
        },


        /**
         * Build the actions column.
         *
         * @return {Object}
         */
        buildActions: function buildActions() {
            var _this4 = this;

            var column = {
                orderable: false,
                searchable: false,
                render: function render(_, __, ___, meta) {
                    return [''].concat(_this4.itemActions).reduce(function (html, action) {
                        return html + _this4.buildAction(action, meta.row);
                    });
                }
            };

            return column;
        },


        /**
         * Build action.
         *
         * @param  {String} action
         * @param  {Number} row
         * @return {String}
         */
        buildAction: function buildAction(action, row) {
            if (action.callback === 'function') {
                return action.callback(row);
            }

            return '\n                <button type="button" class="' + (action.class || '') + '" title="' + (action.title || '') + '" data-action="' + action.name + '" data-row="' + row + '">\n                    <i class="' + action.icon + '"></i> ' + (action.label || '') + '\n                </button>\n            ';
        },


        /**
         * Dispatch an action event.
         *
         * @param {String} action
         * @param {Object} row
         * @param {Number} index
         */
        callAction: function callAction(action, row, index) {
            this.$dispatch(this.eventPrefix + 'action', action, row, index);
        },


        /**
         * Get column title.
         *
         * @param  {Object} column
         * @return {String}
         */
        getTitle: function getTitle(column) {
            if (typeof column.title === 'undefined') {
                return column.name.replace('.', ' ');
            }

            return column.title;
        },
        title: function title(str) {
            if (this.isSpecialColumn(str)) {
                return '';
            }

            return this.titleCase(str);
        },
        titleCase: function titleCase(str) {
            return str.replace(/\w+/g, function (txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        },
        isSpecialColumn: function isSpecialColumn(columnName) {
            return columnName.startsWith('__');
        }
    }
};